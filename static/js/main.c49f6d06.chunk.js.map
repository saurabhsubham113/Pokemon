{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","num","this","props","id","name","type","exp","icon","slice","className","src","alt","Component","Pokedex","title","isWinner","Pokemon","map","p","base_experience","defaultProps","Pokegame","hand1","hand2","length","randomIndex","Math","floor","random","randomPokemon","splice","push","exp1","reduce","pokemon","exp2","style","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c49f6d06.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport './Pokecard.css'\r\nconst Poke_Icon = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/'\r\n\r\nlet padToThree = (num) => ( num <= 999 ? `00${num}`.slice(-3) : num )\r\nclass Pokecard extends Component{\r\n    render(){\r\n        const {id, name, type, exp } = this.props\r\n        const icon = `${Poke_Icon}${padToThree(id)}.png`\r\n        return(\r\n            <div className=\"Pokecard\">\r\n                <h1 className=\"Pokecard-title\"> {name} </h1>\r\n                <div className=\"Pokecard-image\">\r\n                    <img src={icon} alt= {name}/>\r\n                </div>\r\n                <div className=\"Pokecard-data\"> {type} </div>\r\n                <div className=\"Pokecard-data\"> {exp} </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Pokecard;","import React, { Component } from 'react'\r\nimport Pokecard from './Pokecard'\r\nimport './Pokedex.css'\r\n\r\nclass Pokedex extends Component{\r\n    static defaultProps = {\r\n        Pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    }   \r\n    render(){\r\n        let title;\r\n        if(this.props.isWinner){\r\n            title = <h1 className=\"Pokedex-winner\">Winning Hand</h1>\r\n        }else{\r\n            title = <h1 className=\"Pokedex-loser\">Losing Hand</h1>\r\n        }\r\n        return(\r\n            <div className = \"Pokedex\">\r\n                {title}\r\n                <h4>Total Experience {this.props.exp}</h4>\r\n                <div className=\"Pokedex-card\">\r\n                    { this.props.Pokemon.map( (p) => (\r\n                        <Pokecard id={p.id} type={p.type} name={p.name} exp={p.base_experience} />\r\n                    ) )  }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex","import React, { Component } from 'react'\r\nimport Pokedex from './Pokedex'\r\n\r\nclass Pokegame extends Component{\r\n    static defaultProps = {\r\n        Pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    }\r\n    render() {\r\n        let hand1 = []\r\n        let hand2 = [...this.props.Pokemon]\r\n        while(hand1.length < hand2.length){\r\n            let randomIndex = Math.floor(Math.random() * hand2.length)\r\n            let randomPokemon = hand2.splice(randomIndex, 1)[0]\r\n            hand1.push(randomPokemon)\r\n        }\r\n        let exp1 = hand1.reduce((exp,pokemon) => exp + pokemon.base_experience,0)\r\n        let exp2 = hand2.reduce((exp,pokemon) => exp + pokemon.base_experience,0)\r\n        return (\r\n            <div style={{textAlign:'center'}}>\r\n                <h1>Pokegame!!!</h1>\r\n                <Pokedex Pokemon={hand1} exp={exp1} isWinner={exp1 > exp2}/>\r\n                <Pokedex Pokemon={hand2} exp={exp2} isWinner={exp2 >exp1 }/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame","import React from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}